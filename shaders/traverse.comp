#version 460

// keep in sync with src/renderer.zig
layout(local_size_x_id = 0, local_size_y_id = 1) in;

// keep in sync with src/renderer.zig
layout(push_constant) uniform PushConstantBuffer {
    vec4 forward;
    vec4 up;
    vec4 translation;
} push;

// keep in sync with src/renderer.zig
layout(binding = 0, rgba8) restrict writeonly uniform image2D render_target;

layout(binding = 1) uniform usampler3D volume;
layout(binding = 2) uniform usampler3D mask_volume;

layout(constant_id = 2) const float mask_side = 8;

const uint float_mantissa_bits = 23;

vec3 adjustRay(in vec3 rd) {
    const float epsilon = exp2(-float(float_mantissa_bits));
    return mix(rd, vec3(epsilon), lessThan(abs(rd), vec3(epsilon)));
}

vec3 ray(in vec3 forward, in vec3 up, in vec2 uv, in vec2 dim) {
    uv -= 0.5;
    uv.y *= dim.y / dim.x;

    vec3 right = normalize(cross(forward, up));
    vec3 up_adjusted = normalize(cross(right, forward));

    vec3 rd = normalize(uv.x * right + uv.y * up_adjusted + forward);
    return adjustRay(rd);
}

vec3 decodeR3G3B2(uint color) {
    uint red = bitfieldExtract(color, 5, 3);
    uint green = bitfieldExtract(color, 2, 3);
    uint blue = bitfieldExtract(color, 0, 2);

    return vec3(
        red * (1 << (8 - 3)),
        green * (1 << (8 - 3)),
        blue * (1 << (8 - 2))
    ) / 256.0;
}

float minElement(vec3 x) {
    return min(x.x, min(x.y, x.z));
}

float maxElement(vec3 x) {
    return max(x.x, max(x.y, x.z));
}

uint volumeQuery(vec3 p, out vec3 offset, out float side) {
    vec3 mask_pos = p / mask_side;

    uint mask_voxel = texelFetch(mask_volume, ivec3(mask_pos), 0).r;
    if (mask_voxel == 0) {
        offset = floor(mask_pos) * mask_side;
        side = mask_side;
        return 0;
    }

    offset = floor(p);
    side = 1;

    return texelFetch(volume, ivec3(p), 0).r;
}

bool trace(vec3 ro, vec3 rd, out vec3 color, out vec3 normal) {
    const float min_step_size = 0.0001;
    vec3 rrd = 1.0 / rd;
    vec3 bias = rrd * ro;

    vec3 box_min = -bias;
    vec3 box_max = vec3(textureSize(volume, 0)) * rrd - bias;

    float t_min = maxElement(min(box_min, box_max));
    float t_max = minElement(max(box_min, box_max));

    if (t_min > t_max) {
        // Ray misses bounding cube
        return false;
    }

    t_min = max(t_min, 0);

    vec3 flip_mask = vec3(lessThan(vec3(0), rd));

    float t = t_min + min_step_size;
    vec3 voxel_far = min(box_min, box_max);
    while (t < t_max) {
        float t_mask_far;
        while (t < t_max) {
            vec3 p = t * rd + ro;
            vec3 mask_pos = p / mask_side;
            vec3 mask_box_offset = floor(mask_pos) * mask_side;
            vec3 mask_far = (mask_box_offset + flip_mask * mask_side) * rrd - bias;
            t_mask_far = minElement(mask_far);

            uint mask_voxel = texelFetch(mask_volume, ivec3(mask_pos), 0).r;
            if (mask_voxel != 0) {
                break;
            }

            t = max(t_mask_far, t + min_step_size);
        }

        t_mask_far = min(t_max, t_mask_far);
        while (t < t_mask_far) {
            vec3 p = t * rd + ro;
            uint voxel = texelFetch(volume, ivec3(p), 0).r;

            if (voxel != 0) {
                color = decodeR3G3B2(voxel);
                normal = normalize(vec3(lessThan(voxel_far.xyz, min(voxel_far.yzx, voxel_far.zxy))));
                return true;
            }

            vec3 voxel_box_offset = floor(p);
            voxel_far = (voxel_box_offset + flip_mask) * rrd - bias;
            float t_voxel_far = minElement(voxel_far);
            t = max(t_voxel_far, t + min_step_size);
        }

        t = max(t_mask_far, t + min_step_size);
    }

    return false;
}

void main() {
    uvec2 index = gl_GlobalInvocationID.xy;
    uvec2 render_target_dim = imageSize(render_target);
    if (any(greaterThanEqual(index, render_target_dim))) {
        return;
    }

    vec2 dim = vec2(render_target_dim);
    vec2 uv = vec2(index) / dim;
    vec3 rd = ray(push.forward.xyz, push.up.xyz, uv, dim);
    vec3 ro = push.translation.xyz;

    vec3 color, normal;
    if (trace(ro, rd, color, normal)) {
        color *= max(0.1, dot(normal, normalize(vec3(1, 2, 3))));
    } else {
        color = rd;
    }

    imageStore(render_target, ivec2(index), vec4(color, 1));
}
